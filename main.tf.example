variable "project_prefix" {
  type        = string
  description = "prefix string put in front of string"
  default     = "f5xc"
}

variable "project_suffix" {
  type        = string
  description = "prefix string put at the end of string"
  default     = "01"
}

variable "f5xc_api_p12_file" {
  type = string
}

variable "f5xc_api_url" {
  type = string
}

variable "f5xc_api_token" {
  type = string
}

variable "f5xc_tenant" {
  type = string
}

variable "f5xc_namespace" {
  type    = string
  default = "system"
}

variable "ssh_public_key_file" {
  type = string
}

variable "f5xc_aws_cred" {
  type    = string
  default = "ck-aws-01"
}

variable "f5xc_aws_region" {
  type    = string
  default = "us-west-2"
}

variable "f5xc_aws_az" {
  type    = string
  default = "us-west-2a"
}

variable "f5xc_aws_tgw_owner" {
  type    = string
  default = "c.klewar@ves.io"
}

variable "owner_tag" {
  type    = string
  default = "c.klewar@f5.com"
}

variable "create_timeout" {
  type    = string
  default = "1800s"
}

provider "volterra" {
  api_p12_file = var.f5xc_api_p12_file
  url          = var.f5xc_api_url
  alias        = "default"
}

provider "aws" {
  region = var.f5xc_aws_region
  alias  = "default"
}

locals {
  node0_tgw_multi_node_inside_subnet   = format("%s-snet-node0-mnic-inside-%s", var.project_prefix, var.project_suffix)
  node0_tgw_multi_node_outside_subnet  = format("%s-snet-node0-mnic-outside-%s", var.project_prefix, var.project_suffix)
  node0_tgw_multi_node_workload_subnet = format("%s-snet-node0-mnic-workload-%s", var.project_prefix, var.project_suffix)
  node1_tgw_multi_node_inside_subnet   = format("%s-snet-node1-mnic-inside-%s", var.project_prefix, var.project_suffix)
  node1_tgw_multi_node_outside_subnet  = format("%s-snet-node1-mnic-outside-%s", var.project_prefix, var.project_suffix)
  node1_tgw_multi_node_workload_subnet = format("%s-snet-node1-mnic-workload-%s", var.project_prefix, var.project_suffix)
  node2_tgw_multi_node_inside_subnet   = format("%s-snet-node2-mnic-inside-%s", var.project_prefix, var.project_suffix)
  node2_tgw_multi_node_outside_subnet  = format("%s-snet-node2-mnic-outside-%s", var.project_prefix, var.project_suffix)
  node2_tgw_multi_node_workload_subnet = format("%s-snet-node2-mnic-workload-%s", var.project_prefix, var.project_suffix)

  custom_tags = {
    Owner        = var.owner_tag
    f5xc-tenant  = var.f5xc_tenant
    f5xc-feature = "f5xc-aws-tgw-multi-node-site"
  }
}

module "vpc__multi_node_new_subnets" {
  source             = "./modules/aws/vpc"
  aws_owner          = var.owner_tag
  aws_region         = var.f5xc_aws_region
  aws_az_name        = var.f5xc_aws_az
  aws_vpc_name       = format("%s-vpc-mn-snic-exists-vpc-and-nsnet-%s", var.project_prefix, var.project_suffix)
  aws_vpc_cidr_block = "172.16.40.0/22"
  custom_tags        = local.custom_tags
  providers          = {
    aws = aws.default
  }
}

module "subnet__multi_node_new_subnets" {
  source          = "./modules/aws/subnet"
  aws_vpc_id      = module.vpc__multi_node_new_subnets.aws_vpc["id"]
  aws_vpc_subnets = [
    {
      name                    = local.node0_tgw_multi_node_inside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = true
      cidr_block              = "172.16.40.0/26"
      availability_zone       = var.f5xc_aws_az
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node0_tgw_multi_node_outside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = true
      cidr_block              = "172.16.40.64/26"
      availability_zone       = var.f5xc_aws_az
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node0_tgw_multi_node_workload_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = true
      cidr_block              = "172.16.40.128/26"
      availability_zone       = var.f5xc_aws_az
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node1_tgw_multi_node_inside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = true
      cidr_block              = "172.16.41.0/26"
      availability_zone       = var.f5xc_aws_az
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node1_tgw_multi_node_outside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = true
      cidr_block              = "172.16.41.64/26"
      availability_zone       = var.f5xc_aws_az
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node1_tgw_multi_node_workload_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = true
      cidr_block              = "172.16.41.128/26"
      availability_zone       = var.f5xc_aws_az
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node2_tgw_multi_node_inside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = true
      cidr_block              = "172.16.42.0/26"
      availability_zone       = var.f5xc_aws_az
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node2_tgw_multi_node_outside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = true
      cidr_block              = "172.16.42.64/26"
      availability_zone       = var.f5xc_aws_az
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node2_tgw_multi_node_workload_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = true
      cidr_block              = "172.16.42.128/26"
      availability_zone       = var.f5xc_aws_az
      custom_tags             = local.custom_tags
    }
  ]
  providers = {
    aws = aws.default
  }
}

module "f5xc_aws_tgw_multi_node_new_tgw_new_subnets" {
  source                         = "./modules/f5xc/site/aws/tgw"
  f5xc_tenant                    = var.f5xc_tenant
  f5xc_api_url                   = var.f5xc_api_url
  f5xc_aws_cred                  = var.f5xc_aws_cred
  f5xc_namespace                 = var.f5xc_namespace
  f5xc_api_token                 = var.f5xc_api_token
  f5xc_aws_region                = var.f5xc_aws_region
  f5xc_aws_tgw_name              = format("%s-tgw-m-node-new-sub-%s", var.project_prefix, var.project_suffix)
  f5xc_aws_tgw_owner             = var.f5xc_aws_tgw_owner
  f5xc_aws_default_ce_sw_version = true
  f5xc_aws_default_ce_os_version = true
  f5xc_aws_tgw_no_worker_nodes   = true
  f5xc_aws_tgw_primary_ipv4      = "192.168.168.0/21"
  f5xc_aws_tgw_az_nodes          = {
    node0 : {
      f5xc_aws_tgw_workload_subnet = "192.168.168.0/26",
      f5xc_aws_tgw_inside_subnet   = "192.168.168.64/26",
      f5xc_aws_tgw_outside_subnet  = "192.168.168.128/26",
      f5xc_aws_tgw_az_name         = var.f5xc_aws_az
    },
    node1 : {
      f5xc_aws_tgw_workload_subnet = "192.168.169.0/26",
      f5xc_aws_tgw_inside_subnet   = "192.168.169.64/26",
      f5xc_aws_tgw_outside_subnet  = "192.168.169.128/26",
      f5xc_aws_tgw_az_name         = var.f5xc_aws_az
    },
    node2 : {
      f5xc_aws_tgw_workload_subnet = "192.168.170.0/26",
      f5xc_aws_tgw_inside_subnet   = "192.168.170.64/26",
      f5xc_aws_tgw_outside_subnet  = "192.168.170.128/26",
      f5xc_aws_tgw_az_name         = var.f5xc_aws_az
    }
  }
  ssh_public_key = file(var.ssh_public_key_file)
  custom_tags    = local.custom_tags
  providers      = {
    aws      = aws.default
    volterra = volterra.default
  }
}

output "f5xc_aws_tgw_multi_node_new_tgw_new_subnets" {
  value = module.f5xc_aws_tgw_multi_node_new_tgw_new_subnets.f5xc_aws_tgw
}

module "f5xc_aws_tgw_multi_node_new_tgw_new_subnets_apply_timeout_workaround" {
  source         = "./modules/utils/timeout"
  depend_on      = module.f5xc_aws_tgw_multi_node_new_tgw_new_subnets.f5xc_aws_tgw
  create_timeout = var.create_timeout
}

/*module "aws_tgw_multi_node_existing_subnets" {
  source                          = "./modules/f5xc/site/aws/tgw"
  f5xc_namespace                  = var.f5xc_namespace
  f5xc_tenant                     = var.f5xc_tenant
  f5xc_aws_region                 = var.f5xc_aws_region
  f5xc_aws_cred                   = var.f5xc_aws_cred
  f5xc_aws_default_ce_sw_version  = true
  f5xc_aws_default_ce_os_version  = true
  f5xc_aws_tgw_name               = format("%s-tgw-m-node-existing-s-%s", var.project_prefix, var.project_suffix)
  f5xc_aws_tgw_no_worker_nodes    = false
  f5xc_aws_tgw_total_worker_nodes = 2
  f5xc_aws_vpc_id                 = module.aws_vpc_tgw_multi_node_new_subnets.aws_vpc["id"]
  f5xc_aws_tgw_az_nodes           = {
    node0 : {
      f5xc_aws_tgw_workload_existing_subnet_id = module.aws_subnet_tgw_multi_node_new_subnets.aws_subnets[local.node0_tgw_multi_node_workload_subnet]["id"]
      f5xc_aws_tgw_inside_existing_subnet_id   = module.aws_subnet_tgw_multi_node_new_subnets.aws_subnets[local.node0_tgw_multi_node_inside_subnet]["id"],
      f5xc_aws_tgw_outside_existing_subnet_id  = module.aws_subnet_tgw_multi_node_new_subnets.aws_subnets[local.node0_tgw_multi_node_outside_subnet]["id"]
    },
    node1 : {
      f5xc_aws_tgw_workload_existing_subnet_id = module.aws_subnet_tgw_multi_node_new_subnets.aws_subnets[local.node1_tgw_multi_node_workload_subnet]["id"],
      f5xc_aws_tgw_inside_existing_subnet_id   = module.aws_subnet_tgw_multi_node_new_subnets.aws_subnets[local.node1_tgw_multi_node_inside_subnet]["id"],
      f5xc_aws_tgw_outside_existing_subnet_id  = module.aws_subnet_tgw_multi_node_new_subnets.aws_subnets[local.node1_tgw_multi_node_outside_subnet]["id"]
    },
    node2 : {
      f5xc_aws_tgw_workload_existing_subnet_id = module.aws_subnet_tgw_multi_node_new_subnets.aws_subnets[local.node2_tgw_multi_node_workload_subnet]["id"],
      f5xc_aws_tgw_inside_existing_subnet_id   = module.aws_subnet_tgw_multi_node_new_subnets.aws_subnets[local.node2_tgw_multi_node_inside_subnet]["id"],
      f5xc_aws_tgw_outside_existing_subnet_id  = module.aws_subnet_tgw_multi_node_new_subnets.aws_subnets[local.node2_tgw_multi_node_outside_subnet]["id"]
    }
  }
  custom_tags                          = var.custom_tag
  public_ssh_key = var.ssh_public_key_file
  providers      = {
    aws = aws.default
    volterra = volterra.default
  }
}
}*/